# Deno Documentation

> Deno is an open source JavaScript, TypeScript, and WebAssembly runtime with secure defaults and a great developer experience. It's built on V8, Rust, and Tokio.

Deno is a modern, secure-by-default runtime for JavaScript, TypeScript, and WebAssembly. This documentation covers the Deno runtime, Deno Deploy cloud service, and related tools and services.

## Runtime Documentation

Documentation for the Deno CLI and runtime environment, including installation, configuration, and core concepts.

- [deno.json and package.json](https://docs.deno.com/runtime/fundamentals/configuration): The guide to configuring your Deno projects. Learn about TypeScript settings, tasks, dependencies, formatting, linting, and how to use both deno.json and/or package.json effectively.
- [Debugging](https://docs.deno.com/runtime/fundamentals/debugging): Complete guide to debugging Deno applications. Learn to use Chrome DevTools, VS Code debugger, and other debugging techniques for TypeScript/JavaScript code in Deno.
- [Foreign Function Interface (FFI)](https://docs.deno.com/runtime/fundamentals/ffi): Learn how to use Deno's Foreign Function Interface (FFI) to call native libraries directly from JavaScript or TypeScript. Includes examples, best practices, and security considerations.
- [Writing an HTTP Server](https://docs.deno.com/runtime/fundamentals/http_server): A guide to creating HTTP servers in Deno. Learn about the Deno.serve API, request handling, WebSocket support, response streaming, and how to build production-ready HTTP/HTTPS servers with automatic compression.
- [runtime/fundamentals/index.md](https://docs.deno.com/runtime/fundamentals/): A guide to Deno's fundamental concepts and features. Learn about built-in tooling, TypeScript support, Node.js compatibility, security model, and modern JavaScript features that make Deno powerful and developer-friendly.
- [Linting and formatting](https://docs.deno.com/runtime/fundamentals/linting_and_formatting): A guide to Deno's built-in code quality tools. Learn how to use deno lint and deno fmt commands, configure rules, integrate with CI/CD pipelines, and maintain consistent code style across your projects.
- [Modules and dependencies](https://docs.deno.com/runtime/fundamentals/modules): A guide to managing modules and dependencies in Deno. Learn about ECMAScript modules, third-party packages, import maps, dependency management, versioning, and how to publish your own modules.
- [Node and npm Compatibility](https://docs.deno.com/runtime/fundamentals/node): Guide to using Node.js modules and npm packages in Deno. Learn about compatibility features, importing npm packages, and differences between Node.js and Deno environments.
- [runtime/fundamentals/open_telemetry.md](https://docs.deno.com/runtime/fundamentals/open_telemetry): Learn how to implement observability in Deno applications using OpenTelemetry. Covers tracing, metrics collection, and integration with monitoring systems.
- [Security and permissions](https://docs.deno.com/runtime/fundamentals/security): A guide to Deno's security model and permissions system. Learn about secure defaults, permission flags, runtime prompts, and how to safely execute code with granular access controls.
- [Stability and releases](https://docs.deno.com/runtime/fundamentals/stability_and_releases): Guide to Deno's stability guarantees and release process. Covering release channels, long-term support (LTS), unstable features, versioning policy, and how Deno maintains backward compatibility.
- [Standard Library](https://docs.deno.com/runtime/fundamentals/standard_library): An introduction to Deno's Standard Library. Learn about TypeScript-first modules, cross-platform compatibility, versioning, package management, and how to use standard modules in your Deno projects.
- [Testing](https://docs.deno.com/runtime/fundamentals/testing): A guide to Deno's testing capabilities. Learn about the built-in test runner, assertions, mocking, coverage reporting, snapshot testing, and how to write effective tests for your Deno applications.
- [TypeScript support](https://docs.deno.com/runtime/fundamentals/typescript): Learn how to use TypeScript with Deno. Covers configuration options, type checking, and best practices for writing type-safe Deno applications.
- [Web development](https://docs.deno.com/runtime/fundamentals/web_dev): A guide to web development with Deno. Learn about supported frameworks like Fresh, Next.js, and Astro, along with built-in features for building modern web applications.
- [Workspaces and monorepos](https://docs.deno.com/runtime/fundamentals/workspaces): A guide to managing workspaces and monorepos in Deno. Learn about workspace configuration, package management, dependency resolution, and how to structure multi-package projects effectively.
- [Architecture Overview](https://docs.deno.com/runtime/contributing/architecture): Deep dive into Deno's internal architecture, explaining core components like the runtime, compiler, and security sandbox. Learn how Deno processes requests and executes JavaScript/TypeScript code.
- [Documentation guidelines](https://docs.deno.com/runtime/contributing/docs): Guide for contributing to Deno's documentation. Learn our documentation standards, writing style, and how to submit documentation changes.
- [Contributing an example](https://docs.deno.com/runtime/contributing/examples): Learn how to create and contribute meaningful examples to the Deno docs.
- [Contributing and support](https://docs.deno.com/runtime/contributing/): Guide to contributing to the Deno project and ecosystem. Learn about different Deno repositories, contribution guidelines, and how to submit effective pull requests.
- [Release Schedule](https://docs.deno.com/runtime/contributing/release_schedule): Overview of Deno's release cycle and versioning process. Learn about stable releases, canary builds, and how to manage different Deno versions including upgrading to specific builds.
- [Deno Style Guide](https://docs.deno.com/runtime/contributing/style_guide): Comprehensive style guide for contributing to Deno's internal runtime code and standard library. Covers coding conventions, documentation standards, testing requirements, and best practices for TypeScript and Rust development.
- [Where to get help](https://docs.deno.com/runtime/help): Guide to getting help with Deno. Find community resources, support channels, discussion forums, and how to engage with the Deno community for troubleshooting and assistance.
- [deno add](https://docs.deno.com/runtime/reference/cli/add): Add and manage project dependencies with Deno.
- [`deno bench`, benchmarking tool](https://docs.deno.com/runtime/reference/cli/bench): Run benchmarks using Deno's built-in bench tool.
- [Bundler (deprecated)](https://docs.deno.com/runtime/reference/cli/bundler)
- [deno check](https://docs.deno.com/runtime/reference/cli/check): Download and type-check code without execution
- [deno clean](https://docs.deno.com/runtime/reference/cli/clean): Remove cached dependencies for a clean start
- [`deno compile`, standalone executables](https://docs.deno.com/runtime/reference/cli/compile): Compile your code into a standalone executable
- [deno completions](https://docs.deno.com/runtime/reference/cli/completions): Generate shell completions for Deno
- [deno coverage](https://docs.deno.com/runtime/reference/cli/coverage): Generate a coverage report for your code
- [`deno doc`, documentation generator](https://docs.deno.com/runtime/reference/cli/doc): Generate documentation from your code
- [Configuring Deno behavior](https://docs.deno.com/runtime/reference/cli/env_variables)
- [deno eval](https://docs.deno.com/runtime/reference/cli/eval): Evaluate JavaScript and TypeScript code in the command line
- [`deno fmt`, code formatting](https://docs.deno.com/runtime/reference/cli/fmt): Format your code with Deno's built-in formatter
- [Deno CLI Subcommands](https://docs.deno.com/runtime/reference/cli/)
- [`deno info`, dependency inspector](https://docs.deno.com/runtime/reference/cli/info): Inspect the dependencies of your project
- [`deno init`, start a new project](https://docs.deno.com/runtime/reference/cli/init): Scaffold a new Deno project with tests and configuration
- [`deno install`](https://docs.deno.com/runtime/reference/cli/install): Install and cache dependencies for your project
- [Jupyter Kernel for Deno](https://docs.deno.com/runtime/reference/cli/jupyter): Write JavaScript and TypeScript in Jupyter notebooks thanks to Deno's built-in Jupyter kernel
- [`deno lint`, linter](https://docs.deno.com/runtime/reference/cli/lint): Run the Deno linter to check your code for errors and apply automated fixes
- [deno lsp](https://docs.deno.com/runtime/reference/cli/lsp)
- [deno outdated](https://docs.deno.com/runtime/reference/cli/outdated): Check for outdated dependencies in your project and safely update them with an interactive CLI
- [deno publish](https://docs.deno.com/runtime/reference/cli/publish): Publish your package or workspace to the JSR registry
- [deno remove](https://docs.deno.com/runtime/reference/cli/remove): Remove a dependency from your project
- [`deno repl`, interactive scripting prompt](https://docs.deno.com/runtime/reference/cli/repl): Interact with Deno's runtime in a REPL environment
- [`deno run`, run a file](https://docs.deno.com/runtime/reference/cli/run): Run a JavaScript or TypeScript program from a file or URL with Deno's runtime
- [deno serve](https://docs.deno.com/runtime/reference/cli/serve): A flexible and configurable HTTP server for Deno
- [`deno task`](https://docs.deno.com/runtime/reference/cli/task): A configurable task runner for Deno
- [deno test](https://docs.deno.com/runtime/reference/cli/test): Run tests for your project with Deno's built-in test runner
- [deno types](https://docs.deno.com/runtime/reference/cli/types): Generate TypeScript types from your code
- [deno uninstall](https://docs.deno.com/runtime/reference/cli/uninstall): Remove a dependency from your project or from your global cache
- [Unstable feature flags](https://docs.deno.com/runtime/reference/cli/unstable_flags)
- [deno upgrade](https://docs.deno.com/runtime/reference/cli/upgrade): Upgrade Deno to the latest, or any specific version
- [Continuous integration](https://docs.deno.com/runtime/reference/continuous_integration): Guide to setting up continuous integration (CI) pipelines for Deno projects. Learn how to configure GitHub Actions workflows, run tests and linting in CI, handle cross-platform builds, and optimize pipeline performance with caching.
- [Deno Namespace APIs](https://docs.deno.com/runtime/reference/deno_namespace_apis): A guide to Deno's built-in runtime APIs. Learn about file system operations, network functionality, permissions management, and other core capabilities available through the global Deno namespace.
- [Create working directory](https://docs.deno.com/runtime/reference/docker): Complete guide to using Deno with Docker containers. Learn about official Deno images, writing Dockerfiles, multi-stage builds, workspace containerization, and Docker best practices for Deno applications.
- [Documentation Tests](https://docs.deno.com/runtime/reference/documentation): Learn how to write and run documentation tests in Deno. This guide covers how to create testable code examples in documentation comments, type-checking documentation, and running doc tests with the Deno test runner.
- [Environment variables](https://docs.deno.com/runtime/reference/env_variables): A guide to working with environment variables in Deno. Learn about Deno.env API, .env file support, CLI configuration, and special environment variables that control Deno's behavior.
- [runtime/reference/index.md](https://docs.deno.com/runtime/reference/): Technical references and guides for Deno. Includes detailed documentation on runtime APIs, environment setup, CLI tools, and advanced features for experienced Deno developers.
- [JSX](https://docs.deno.com/runtime/reference/jsx): Complete guide to using JSX in Deno. Learn about JSX configuration options, automatic runtime features, development transforms, and Deno's optimized precompile transform for server-side rendering.
- [Lint Plugins](https://docs.deno.com/runtime/reference/lint_plugins): Guide to creating and using custom lint plugins in Deno. Learn how to write custom lint rules, use selectors for AST matching, implement fixes, and test your plugins using Deno's lint plugin API.
- [Language Server Integration](https://docs.deno.com/runtime/reference/lsp_integration): Technical guide to integrating Deno's Language Server Protocol (LSP). Learn about LSP implementation details, custom commands, requests, notifications, and testing API integration for editor and tool developers.
- [Deno 1.x to 2.x Migration Guide](https://docs.deno.com/runtime/reference/migration_guide): Comprehensive guide to migrating from Deno 1.x to 2.x. Learn about breaking changes, API updates, Node.js compatibility features, and how to update your codebase to work with Deno 2.x.
- [runtime/reference/node_apis.md](https://docs.deno.com/runtime/reference/node_apis): A guide to Node.js compatibility in Deno. Learn about supported Node.js built-in modules, global objects, and how to use Node.js packages in Deno projects.
- [Configuring TypeScript](https://docs.deno.com/runtime/reference/ts_config_migration): A guide to TypeScript configuration in Deno. Learn about compiler options, type checking JavaScript, JSDoc support, type declarations, and configuring TypeScript for cross-platform compatibility.
- [Deno & Visual Studio Code](https://docs.deno.com/runtime/reference/vscode): Complete guide to using Deno with Visual Studio Code. Learn about extension setup, workspace configuration, debugging, testing, task automation, and advanced IDE features for Deno development.
- [WebAssembly](https://docs.deno.com/runtime/reference/wasm): A guide to using WebAssembly (Wasm) in Deno. Learn about module imports, type checking, streaming APIs, optimization techniques, and how to work with various programming languages that compile to Wasm.
- [Web Platform APIs](https://docs.deno.com/runtime/reference/web_platform_apis): A guide to the Web Platform APIs available in Deno. Learn about fetch, events, workers, storage, and other web standard APIs, including implementation details and deviations from browser specifications.
- [Good. We grant net permission to net_client.ts.](https://docs.deno.com/runtime/getting_started/command_line_interface): A comprehensive guide to using Deno's command-line interface (CLI). Learn about running scripts, managing permissions, using watch mode, and configuring Deno's runtime behavior through command-line flags and options.
- [runtime/getting_started/first_project.md](https://docs.deno.com/runtime/getting_started/first_project): Step-by-step guide to creating your first Deno project. Learn how to initialize a project, understand the basic file structure, run TypeScript code, and execute tests using Deno's built-in test runner.
- [Download and install the latest version of Deno](https://docs.deno.com/runtime/getting_started/installation): A Guide to installing Deno on different operating systems. Includes instructions for Windows, macOS, and Linux using various package managers, manual installation methods, and Docker containers.
- [Set up your environment](https://docs.deno.com/runtime/getting_started/setup_your_environment): A guide to setting up your development environment for Deno. Learn how to configure popular editors like VS Code, set up language server support, and enable shell completions for better productivity.

## Deploy Documentation

Documentation for Deno Deploy, a serverless platform for deploying JavaScript to a global edge network.

- [Backups](https://docs.deno.com/deploy/kv/manual/backup)
- [Scheduling cron tasks](https://docs.deno.com/deploy/kv/manual/cron)
- [Data Modeling in TypeScript](https://docs.deno.com/deploy/kv/manual/data_modeling_typescript)
- [Deno KV Quick Start](https://docs.deno.com/deploy/kv/manual/)
- [Key Expiration (TTL for keys)](https://docs.deno.com/deploy/kv/manual/key_expiration)
- [Key Space](https://docs.deno.com/deploy/kv/manual/key_space)
- [Using KV in Node.js](https://docs.deno.com/deploy/kv/manual/node)
- [KV on Deno Deploy](https://docs.deno.com/deploy/kv/manual/on_deploy)
- [Operations](https://docs.deno.com/deploy/kv/manual/operations)
- [Using Queues](https://docs.deno.com/deploy/kv/manual/queue_overview)
- [Secondary Indexes](https://docs.deno.com/deploy/kv/manual/secondary_indexes)
- [Transactions](https://docs.deno.com/deploy/kv/manual/transactions)
- [Deno KV Tutorials & Examples](https://docs.deno.com/deploy/kv/tutorials/)
- [Schedule a notification for a future date](https://docs.deno.com/deploy/kv/tutorials/schedule_notification)
- [Offload webhook processing to a queue](https://docs.deno.com/deploy/kv/tutorials/webhook_processor)
- [Getting started](https://docs.deno.com/deploy/early-access/getting_started): Step-by-step guide to creating and configuring your first Deno Deploy Early Access application, including organization setup, build configuration, environment variables, and deployment monitoring.
- [Deno Deploy Early Access](https://docs.deno.com/deploy/early-access/): Guide to Deno Deploy Early Access features, comparison with Deno Deploy Classic, and getting started instructions for deployment.
- [deploy/early-access/reference.md](https://docs.deno.com/deploy/early-access/reference): Comprehensive reference guide for Deno Deploy Early Access covering accounts, organizations, applications, builds, observability, environments, and custom domains.
- [Deno Deploy Early Access Support](https://docs.deno.com/deploy/early-access/support): How to get support during the Deno Deploy Early Access phase, including Discord channels and email contact information.
- [Deno Deploy Early Access Usage Guidelines](https://docs.deno.com/deploy/early-access/usage): Important limitations, service level expectations, and terms of use for the Deno Deploy Early Access program.
- [Acceptable use policy](https://docs.deno.com/deploy/manual/acceptable-use-policy)
- [CI and GitHub Actions](https://docs.deno.com/deploy/manual/ci_github)
- [Custom domains](https://docs.deno.com/deploy/manual/custom-domains)
- [Using deployctl on the command line](https://docs.deno.com/deploy/manual/deployctl)
- [Deployments](https://docs.deno.com/deploy/manual/deployments)
- [Connect to DynamoDB](https://docs.deno.com/deploy/manual/dynamodb)
- [Edge Cache](https://docs.deno.com/deploy/manual/edge-cache)
- [Environment variables](https://docs.deno.com/deploy/manual/environment-variables)
- [Connect to FaunaDB](https://docs.deno.com/deploy/manual/faunadb)
- [Connect to Firebase](https://docs.deno.com/deploy/manual/firebase)
- [Fulfillment Policy](https://docs.deno.com/deploy/manual/fulfillment-policy)
- [Deploy with GitHub integration](https://docs.deno.com/deploy/manual/how-to-deploy)
- [Deploy Quick Start](https://docs.deno.com/deploy/manual/)
- [Application logging](https://docs.deno.com/deploy/manual/logs)
- [Reverse proxy middleware](https://docs.deno.com/deploy/manual/middleware)
- [Connect to Neon Postgres](https://docs.deno.com/deploy/manual/neon-postgres)
- [Organizations](https://docs.deno.com/deploy/manual/organizations)
- [Playgrounds](https://docs.deno.com/deploy/manual/playgrounds)
- [Connect to Postgres](https://docs.deno.com/deploy/manual/postgres)
- [Pricing and limitations](https://docs.deno.com/deploy/manual/pricing-and-limits)
- [Privacy Policy](https://docs.deno.com/deploy/manual/privacy-policy)
- [Regions](https://docs.deno.com/deploy/manual/regions)
- [Local development](https://docs.deno.com/deploy/manual/running-scripts-locally)
- [Security and responsible disclosure](https://docs.deno.com/deploy/manual/security)
- [Terms and Conditions](https://docs.deno.com/deploy/manual/terms-and-conditions)
- [Deno Deploy Use Cases](https://docs.deno.com/deploy/manual/use-cases)
- [Compressing response bodies](https://docs.deno.com/deploy/api/compression)
- [Dynamic import](https://docs.deno.com/deploy/api/dynamic-import)
- [API Reference](https://docs.deno.com/deploy/api/)
- [BroadcastChannel](https://docs.deno.com/deploy/api/runtime-broadcast-channel)
- [HTTP requests (fetch)](https://docs.deno.com/deploy/api/runtime-fetch)
- [File system APIs](https://docs.deno.com/deploy/api/runtime-fs)
- [HTTP Headers](https://docs.deno.com/deploy/api/runtime-headers)
- [Node.js built-in APIs](https://docs.deno.com/deploy/api/runtime-node)
- [HTTP Request](https://docs.deno.com/deploy/api/runtime-request)
- [HTTP Response](https://docs.deno.com/deploy/api/runtime-response)
- [TCP sockets and TLS](https://docs.deno.com/deploy/api/runtime-sockets)
- [Discord Slash Command](https://docs.deno.com/deploy/tutorials/discord-slash)
- [Basic Fresh site](https://docs.deno.com/deploy/tutorials/fresh)
- [Tutorials](https://docs.deno.com/deploy/tutorials/)
- [Simple API server](https://docs.deno.com/deploy/tutorials/simple-api)
- [Deploy a static site](https://docs.deno.com/deploy/tutorials/static-site)
- [Build a blog with Fresh](https://docs.deno.com/deploy/tutorials/tutorial-blog-fresh)
- [API server with DynamoDB](https://docs.deno.com/deploy/tutorials/tutorial-dynamodb)
- [API server with FaunaDB](https://docs.deno.com/deploy/tutorials/tutorial-faunadb)
- [API server with Firestore (Firebase)](https://docs.deno.com/deploy/tutorials/tutorial-firebase)
- [Simple HTTP server](https://docs.deno.com/deploy/tutorials/tutorial-http-server)
- [Build a blog with Hugo](https://docs.deno.com/deploy/tutorials/tutorial-hugo-blog)
- [API server with Postgres](https://docs.deno.com/deploy/tutorials/tutorial-postgres)
- [Use WordPress as a headless CMS](https://docs.deno.com/deploy/tutorials/tutorial-wordpress-frontend)
- [Deploy a React app with Vite](https://docs.deno.com/deploy/tutorials/vite)

## Examples Documentation

Code examples and tutorials demonstrating how to build applications with Deno.

- [All-in-one tooling](https://docs.deno.com/examples/videos/all-in-one_tooling): Learn about Deno's built-in developer tools. Watch how to use the integrated formatter, linter, and test runner to improve code quality without additional configuration or third-party dependencies.
- [Compatibility with Node & npm](https://docs.deno.com/examples/videos/backward_compat_with_node_npm)
- [Browser APIs in Deno](https://docs.deno.com/examples/videos/browser_apis_in_deno): Explore web standard APIs in Deno's server-side environment. Learn how to use fetch, streams, text encoders, and other browser-compatible features while building modern applications with familiar web APIs.
- [Build an API server with TypeScript](https://docs.deno.com/examples/videos/build_api_server_ts): A guide to creating a RESTful API server using Hono and TypeScript in Deno. Watch how to implement CRUD operations, handle routing, manage data persistence, and build a production-ready backend service.
- [Build a Command Line Utility](https://docs.deno.com/examples/videos/command_line_utility)
- [Configuration with Deno JSON](https://docs.deno.com/examples/videos/configuration_with_deno_json)
- [Benchmarking with Deno bench](https://docs.deno.com/examples/videos/deno_bench): Learn how to measure code performance using Deno's built-in benchmarking tool. Discover baseline comparisons, grouped benchmarks, and precise measurement techniques for optimizing your TypeScript and JavaScript code.
- [Deno coverage](https://docs.deno.com/examples/videos/deno_coverage): Learn how to measure test coverage in Deno projects. Watch how to generate coverage reports, analyze code coverage metrics, and use the HTML report feature.
- [Your Deno Dev Environment](https://docs.deno.com/examples/videos/deno_dev_environment): Learn how to set up your Deno development environment. Watch how to install Deno, configure VS Code, enable type checking and autocomplete, and optimize your TypeScript development workflow.
- [Formatting with Deno fmt](https://docs.deno.com/examples/videos/deno_fmt)
- [Getting started with Deno test](https://docs.deno.com/examples/videos/deno_test)
- [Deploy Deno to AWS Lambda](https://docs.deno.com/examples/videos/deploy_deno_to_aws_lambda)
- [Deploying Deno with Docker](https://docs.deno.com/examples/videos/deploying_deno_with_docker)
- [ECMAScript Modules](https://docs.deno.com/examples/videos/esmodules)
- [Interoperability with Node.js](https://docs.deno.com/examples/videos/interoperability_with_nodejs)
- [Introduction to Deno APIs](https://docs.deno.com/examples/videos/intro_to_deno_apis)
- [Connect to Mongoose and MongoDB](https://docs.deno.com/examples/videos/mongoose)
- [Connect to Prisma](https://docs.deno.com/examples/videos/prisma)
- [Publishing Modules with JSR](https://docs.deno.com/examples/videos/publishing_modules_with_jsr)
- [Build a React app](https://docs.deno.com/examples/videos/react_app_video)
- [Build a Realtime WebSocket Application](https://docs.deno.com/examples/videos/realtime_websocket_app)
- [TypeScript and JSX](https://docs.deno.com/examples/videos/ts_jsx)
- [Build a Vue app](https://docs.deno.com/examples/videos/vue_app_video)
- [What is Deno?](https://docs.deno.com/examples/videos/what_is_deno)
- [How to use Apollo with Deno](https://docs.deno.com/examples/tutorials/apollo): Step-by-step tutorial on integrating Apollo GraphQL with Deno. Learn how to set up an Apollo Server, define schemas, implement resolvers, and build a complete GraphQL API using TypeScript.
- [Build Astro with Deno](https://docs.deno.com/examples/tutorials/astro): Step-by-step tutorial on building web applications with Astro and Deno. Learn how to scaffold projects, create dynamic pages, implement SSR, and deploy your Astro sites using Deno's Node.js compatibility.
- [How to Deploy Deno to AWS Lambda](https://docs.deno.com/examples/tutorials/aws_lambda): Step-by-step tutorial on deploying Deno applications to AWS Lambda. Learn about Docker containerization, ECR repositories, function configuration, and how to set up serverless Deno apps on AWS.
- [examples/tutorials/aws_lightsail.md](https://docs.deno.com/examples/tutorials/aws_lightsail): Step-by-step tutorial on deploying Deno applications to AWS Lightsail. Learn about Docker containers, GitHub Actions automation, continuous deployment, and how to set up cost-effective cloud hosting for Deno apps.
- [Behavior-Driven Development (BDD)](https://docs.deno.com/examples/tutorials/bdd): Implementing Behavior-Driven Development with Deno's Standard Library's BDD module. Create readable, well organised tests with effective assertions.
- [Chat application with WebSockets](https://docs.deno.com/examples/tutorials/chat_app): A tutorial on building a real-time chat app using Deno WebSockets. Learn how to create a WebSocket server with Oak, handle multiple client connections, manage state, and build an interactive chat interface with HTML, CSS, and JavaScript.
- [Updating from CommonJS to ESM](https://docs.deno.com/examples/tutorials/cjs_to_esm): Step-by-step guide to migrating Node.js projects from CommonJS to ESM modules. Learn about import/export syntax changes, module resolution differences, and how to use modern JavaScript features in Deno.
- [Deploying Deno to Cloudflare Workers](https://docs.deno.com/examples/tutorials/cloudflare_workers): Step-by-step tutorial on deploying Deno functions to Cloudflare Workers. Learn how to configure denoflare, create worker modules, test locally, and deploy your code to Cloudflare's global edge network.
- [Connecting to databases](https://docs.deno.com/examples/tutorials/connecting_to_databases): A guide to database connectivity in Deno. Learn how to use MySQL, PostgreSQL, MongoDB, SQLite, Firebase, Supabase, and popular ORMs to build data-driven applications with TypeScript.
- [Build a React app with create-vite](https://docs.deno.com/examples/tutorials/create_react): A tutorial on building React applications with Deno and Vite. Learn how to set up a project, configure TypeScript, add API endpoints, implement routing, and deploy your React app using modern development tools.
- [Better debugging with the console API](https://docs.deno.com/examples/tutorials/debugging_with_console): An in-depth guide to advanced console debugging in Deno. Learn about console.table, timers, counters, tracers, and how to leverage the full console API beyond basic logging for better debugging workflows.
- [How to deploy Deno to Digital Ocean](https://docs.deno.com/examples/tutorials/digital_ocean): A step-by-step guide to deploying Deno applications on Digital Ocean. Learn about Docker containerization, GitHub Actions automation, container registries, and how to set up continuous deployment workflows.
- [Build a Database App with Drizzle ORM and Deno](https://docs.deno.com/examples/tutorials/drizzle): Step-by-step guide to building database applications with Drizzle ORM and Deno. Learn about schema management, type-safe queries, PostgreSQL integration, migrations, and how to implement CRUD operations.
- [How to use Express with Deno](https://docs.deno.com/examples/tutorials/express): Step-by-step guide to using Express.js with Deno. Learn how to set up an Express server, configure routes, handle middleware, and build REST APIs using Deno's Node.js compatibility features.
- [Fetch and stream data](https://docs.deno.com/examples/tutorials/fetch_data): A tutorial on working with network requests in Deno. Learn how to use the fetch API for HTTP requests, handle responses, implement data streaming, and manage file uploads and downloads.
- [examples/tutorials/file_based_routing.md](https://docs.deno.com/examples/tutorials/file_based_routing): Tutorial on implementing file-based routing in Deno. Learn how to create a dynamic routing system similar to Next.js, handle HTTP methods, manage nested routes, and build a flexible server architecture.
- [Write a file server](https://docs.deno.com/examples/tutorials/file_server): Tutorial on building a file server with Deno. Learn how to handle HTTP requests, serve static files, implement streaming responses, and use the standard library's file server module for production deployments.
- [File system events](https://docs.deno.com/examples/tutorials/file_system_events): Tutorial on monitoring file system changes with Deno. Learn how to watch directories for file modifications, handle change events, and understand platform-specific behaviors across Linux, macOS, and Windows.
- [How to deploy to Google Cloud Run](https://docs.deno.com/examples/tutorials/google_cloud_run): Step-by-step guide to deploying Deno applications on Google Cloud Run. Learn about Docker containerization, Artifact Registry configuration, GitHub Actions automation, and how to set up continuous deployment to Google Cloud.
- [How to export telemetry data to Grafana](https://docs.deno.com/examples/tutorials/grafana): Complete guide to exporting telemetry data with OpenTelemetry and Grafana. Learn how to configure collectors, visualize traces, and monitor application performance.
- [Executable scripts](https://docs.deno.com/examples/tutorials/hashbang): Guide to creating executable scripts with Deno. Learn about hashbangs, file permissions, cross-platform compatibility, and how to create command-line tools that can run directly from the terminal.
- [How to export telemetry data to Honeycomb](https://docs.deno.com/examples/tutorials/honeycomb): Complete guide to exporting telemetry data with OpenTelemetry and Honeycomb.io. Learn how to configure collectors, visualize traces, and monitor application performance.
- [How to export telemetry data to HyperDX](https://docs.deno.com/examples/tutorials/hyperdx): Complete guide to exporting telemetry data with OpenTelemetry and HyperDX. Learn how to configure collectors, visualize traces, logs, metrics, and debug distributed applications effectively.
- [Initialize a project](https://docs.deno.com/examples/tutorials/initialize_project): Guide to creating and structuring new Deno projects. Learn about starting a new project, task configuration, dependency management, and best practices for growing applications.
- [How to deploy Deno on Kinsta](https://docs.deno.com/examples/tutorials/kinsta): Step-by-step guide to deploying Deno applications on Kinsta. Learn how to configure package.json, handle environment variables, set up Git deployments, and use Kinsta's application hosting platform.
- [Testing in isolation with mocks](https://docs.deno.com/examples/tutorials/mocking): Master the art of mocking in your unit tests. Learn how spies, stubs, fake time, and other Deno tools let you improve your code and confidence
- [Module metadata](https://docs.deno.com/examples/tutorials/module_metadata): A guide to working with module metadata in Deno. Learn about import.meta properties, main module detection, file paths, URL resolution, and how to access module context information in your applications.
- [How to use Mongoose with Deno](https://docs.deno.com/examples/tutorials/mongoose): Step-by-step guide to using Mongoose with Deno. Learn how to set up MongoDB connectivity, create schemas, implement data models, and perform CRUD operations using Mongoose's schema-based modeling.
- [How to use MySQL2 with Deno](https://docs.deno.com/examples/tutorials/mysql2): Step-by-step guide to using MySQL2 with Deno. Learn how to set up database connections, execute queries, handle transactions, and build data-driven applications using MySQL's Node.js driver.
- [Build a Next.js App](https://docs.deno.com/examples/tutorials/next): Walkthrough guide to building a Next.js application with Deno. Learn how to set up a project, create API routes, implement server-side rendering, and build a full-stack TypeScript application.
- [Build a Nuxt app with Deno](https://docs.deno.com/examples/tutorials/nuxt): Step-by-step guide to building Nuxt applications with Deno. Learn how to create a full-stack Vue.js app, implement server-side rendering, add Tailwind styling, and deploy your application.
- [Handle OS signals](https://docs.deno.com/examples/tutorials/os_signals): Tutorial on handling operating system signals in Deno. Learn how to capture SIGINT and SIGBREAK events, manage signal listeners, and implement graceful shutdown handlers in your applications.
- [Distributed Tracing with Context Propagation in Deno](https://docs.deno.com/examples/tutorials/otel_span_propagation): Learn how to implement end-to-end distributed tracing with automatic context propagation in Deno applications. This tutorial covers creating traced services, automatic propagation of trace context, and visualizing distributed traces.
- [How to use Planetscale with Deno](https://docs.deno.com/examples/tutorials/planetscale): Step-by-step guide to using Planetscale with Deno. Learn how to set up serverless MySQL databases, manage connections, execute queries, and build scalable applications with Planetscale's developer-friendly platform.
- [How to create a RESTful API with Prisma and Oak](https://docs.deno.com/examples/tutorials/prisma): Guide to building a RESTful API using Prisma and Oak with Deno. Learn how to set up database schemas, generate clients, implement CRUD operations, and deploy your API with proper type safety.
- [Build Qwik with Deno](https://docs.deno.com/examples/tutorials/qwik): Step-by-step guide to building Qwik applications with Deno. Learn about resumability, server-side rendering, route handling, and how to create fast, modern web applications with zero client-side JavaScript by default.
- [Build a React app with a starter template](https://docs.deno.com/examples/tutorials/react): Complete guide to building React applications with Deno and Vite. Learn how to set up a project from a template, implement routing, add API endpoints, and deploy your full-stack TypeScript application.
- [How to use Redis with Deno](https://docs.deno.com/examples/tutorials/redis): Step-by-step guide to using Redis with Deno. Learn how to set up caching, implement message brokers, handle data streaming, and optimize your applications with Redis's in-memory data store.
- [Run a script](https://docs.deno.com/examples/tutorials/run_script): A guide to creating and running basic scripts with Deno. Learn how to write and execute JavaScript and TypeScript code, understand runtime environments, and get started with fundamental Deno concepts.
- [Snapshot testing](https://docs.deno.com/examples/tutorials/snapshot): Learn how to use snapshot testing in Deno to compare outputs against recorded references, making it easier to detect unintended changes in your code
- [Build a SolidJS app with Deno](https://docs.deno.com/examples/tutorials/solidjs): Build a SolidJS application with Deno. Learn how to set up a project, implement reactive components, handle routing, create API endpoints with Hono, and build a full-stack TypeScript application.
- [Creating a subprocess](https://docs.deno.com/examples/tutorials/subprocess): A guide to working with subprocesses in Deno. Learn how to spawn processes, handle input/output streams, manage process lifecycles, and implement inter-process communication patterns safely.
- [Build an app with Tanstack and Deno](https://docs.deno.com/examples/tutorials/tanstack): Complete guide to building applications with Tanstack and Deno. Learn how to implement Query for data fetching, Router for navigation, manage server state, and create type-safe full-stack applications.
- [Writing tests](https://docs.deno.com/examples/tutorials/testing): Learn key concepts like test setup and structure, assertions, async testing, mocking, test fixtures, and code coverage
- [Build a Typesafe API with tRPC and Deno](https://docs.deno.com/examples/tutorials/trpc): A guide to building type-safe APIs with tRPC and Deno. Learn how to set up endpoints, implement RPC procedures, handle data validation, and create efficient client-server applications.
- [Build a Vue.js App](https://docs.deno.com/examples/tutorials/vue): A tutorial on building Vue.js applications with Deno. Learn how to set up a Vite project, implement component architecture, add routing, manage state, and create a full-stack TypeScript application.
- [Testing web apps](https://docs.deno.com/examples/tutorials/web_testing): A comprehensive guide to testing web applications with Deno
- [Building a word finder app with Deno](https://docs.deno.com/examples/tutorials/word_finder): A tutorial on creating a word search application with Deno. Learn how to build a web server, implement pattern matching, handle HTTP requests, and create an interactive web interface using Oak framework.

## Subhosting Documentation

Documentation for Deno Subhosting, a platform for securely running code written by customers.

- [subhosting/manual/acceptable_use_policy.md](https://docs.deno.com/subhosting/manual/acceptable_use_policy)
- [subhosting/manual/events.md](https://docs.deno.com/subhosting/manual/events)
- [subhosting/manual/index.md](https://docs.deno.com/subhosting/manual/)
- [subhosting/manual/planning_your_implementation.md](https://docs.deno.com/subhosting/manual/planning_your_implementation)
- [subhosting/manual/pricing_and_limits.md](https://docs.deno.com/subhosting/manual/pricing_and_limits)
- [Ignore this file in git](https://docs.deno.com/subhosting/manual/quick_start)
- [subhosting/api/authentication.md](https://docs.deno.com/subhosting/api/authentication)
- [subhosting/api/index.md](https://docs.deno.com/subhosting/api/)

## Lint Documentation

Documentation for Deno's built-in linter and formatter, including available rules and configuration.

- [lint/rules/adjacent-overload-signatures.md](https://docs.deno.com/lint/rules/adjacent-overload-signatures)
- [lint/rules/ban-ts-comment.md](https://docs.deno.com/lint/rules/ban-ts-comment)
- [lint/rules/ban-types.md](https://docs.deno.com/lint/rules/ban-types)
- [lint/rules/ban-unknown-rule-code.md](https://docs.deno.com/lint/rules/ban-unknown-rule-code)
- [lint/rules/ban-untagged-ignore.md](https://docs.deno.com/lint/rules/ban-untagged-ignore)
- [lint/rules/ban-untagged-todo.md](https://docs.deno.com/lint/rules/ban-untagged-todo)
- [lint/rules/ban-unused-ignore.md](https://docs.deno.com/lint/rules/ban-unused-ignore)
- [lint/rules/button-has-type.md](https://docs.deno.com/lint/rules/button-has-type)
- [lint/rules/camelcase.md](https://docs.deno.com/lint/rules/camelcase)
- [lint/rules/constructor-super.md](https://docs.deno.com/lint/rules/constructor-super)
- [lint/rules/default-param-last.md](https://docs.deno.com/lint/rules/default-param-last)
- [lint/rules/eqeqeq.md](https://docs.deno.com/lint/rules/eqeqeq)
- [lint/rules/explicit-function-return-type.md](https://docs.deno.com/lint/rules/explicit-function-return-type)
- [lint/rules/explicit-module-boundary-types.md](https://docs.deno.com/lint/rules/explicit-module-boundary-types)
- [lint/rules/for-direction.md](https://docs.deno.com/lint/rules/for-direction)
- [lint/rules/fresh-handler-export.md](https://docs.deno.com/lint/rules/fresh-handler-export)
- [lint/rules/fresh-server-event-handlers.md](https://docs.deno.com/lint/rules/fresh-server-event-handlers)
- [lint/rules/getter-return.md](https://docs.deno.com/lint/rules/getter-return)
- [lint/rules/guard-for-in.md](https://docs.deno.com/lint/rules/guard-for-in)
- [lint/rules/jsx-boolean-value.md](https://docs.deno.com/lint/rules/jsx-boolean-value)
- [lint/rules/jsx-button-has-type.md](https://docs.deno.com/lint/rules/jsx-button-has-type)
- [lint/rules/jsx-curly-braces.md](https://docs.deno.com/lint/rules/jsx-curly-braces)
- [lint/rules/jsx-key.md](https://docs.deno.com/lint/rules/jsx-key)
- [lint/rules/jsx-no-children-prop.md](https://docs.deno.com/lint/rules/jsx-no-children-prop)
- [lint/rules/jsx-no-comment-text-nodes.md](https://docs.deno.com/lint/rules/jsx-no-comment-text-nodes)
- [lint/rules/jsx-no-duplicate-props.md](https://docs.deno.com/lint/rules/jsx-no-duplicate-props)
- [lint/rules/jsx-no-unescaped-entities.md](https://docs.deno.com/lint/rules/jsx-no-unescaped-entities)
- [lint/rules/jsx-no-useless-fragment.md](https://docs.deno.com/lint/rules/jsx-no-useless-fragment)
- [lint/rules/jsx-props-no-spread-multi.md](https://docs.deno.com/lint/rules/jsx-props-no-spread-multi)
- [lint/rules/jsx-void-dom-elements-no-children.md](https://docs.deno.com/lint/rules/jsx-void-dom-elements-no-children)
- [lint/rules/no-array-constructor.md](https://docs.deno.com/lint/rules/no-array-constructor)
- [lint/rules/no-async-promise-executor.md](https://docs.deno.com/lint/rules/no-async-promise-executor)
- [lint/rules/no-await-in-loop.md](https://docs.deno.com/lint/rules/no-await-in-loop)
- [lint/rules/no-await-in-sync-fn.md](https://docs.deno.com/lint/rules/no-await-in-sync-fn)
- [lint/rules/no-boolean-literal-for-arguments.md](https://docs.deno.com/lint/rules/no-boolean-literal-for-arguments)
- [lint/rules/no-case-declarations.md](https://docs.deno.com/lint/rules/no-case-declarations)
- [lint/rules/no-class-assign.md](https://docs.deno.com/lint/rules/no-class-assign)
- [lint/rules/no-compare-neg-zero.md](https://docs.deno.com/lint/rules/no-compare-neg-zero)
- [lint/rules/no-cond-assign.md](https://docs.deno.com/lint/rules/no-cond-assign)
- [lint/rules/no-console.md](https://docs.deno.com/lint/rules/no-console)
- [lint/rules/no-const-assign.md](https://docs.deno.com/lint/rules/no-const-assign)
- [lint/rules/no-constant-condition.md](https://docs.deno.com/lint/rules/no-constant-condition)
- [lint/rules/no-control-regex.md](https://docs.deno.com/lint/rules/no-control-regex)
- [lint/rules/no-debugger.md](https://docs.deno.com/lint/rules/no-debugger)
- [lint/rules/no-delete-var.md](https://docs.deno.com/lint/rules/no-delete-var)
- [lint/rules/no-deprecated-deno-api.md](https://docs.deno.com/lint/rules/no-deprecated-deno-api)
- [lint/rules/no-dupe-args.md](https://docs.deno.com/lint/rules/no-dupe-args)
- [lint/rules/no-dupe-class-members.md](https://docs.deno.com/lint/rules/no-dupe-class-members)
- [lint/rules/no-dupe-else-if.md](https://docs.deno.com/lint/rules/no-dupe-else-if)
- [lint/rules/no-dupe-keys.md](https://docs.deno.com/lint/rules/no-dupe-keys)
- [lint/rules/no-duplicate-case.md](https://docs.deno.com/lint/rules/no-duplicate-case)
- [lint/rules/no-empty-character-class.md](https://docs.deno.com/lint/rules/no-empty-character-class)
- [lint/rules/no-empty-enum.md](https://docs.deno.com/lint/rules/no-empty-enum)
- [lint/rules/no-empty-interface.md](https://docs.deno.com/lint/rules/no-empty-interface)
- [lint/rules/no-empty-pattern.md](https://docs.deno.com/lint/rules/no-empty-pattern)
- [lint/rules/no-empty.md](https://docs.deno.com/lint/rules/no-empty)
- [lint/rules/no-eval.md](https://docs.deno.com/lint/rules/no-eval)
- [lint/rules/no-ex-assign.md](https://docs.deno.com/lint/rules/no-ex-assign)
- [lint/rules/no-explicit-any.md](https://docs.deno.com/lint/rules/no-explicit-any)
- [lint/rules/no-external-import.md](https://docs.deno.com/lint/rules/no-external-import)
- [lint/rules/no-extra-boolean-cast.md](https://docs.deno.com/lint/rules/no-extra-boolean-cast)
- [lint/rules/no-extra-non-null-assertion.md](https://docs.deno.com/lint/rules/no-extra-non-null-assertion)
- [lint/rules/no-fallthrough.md](https://docs.deno.com/lint/rules/no-fallthrough)
- [lint/rules/no-func-assign.md](https://docs.deno.com/lint/rules/no-func-assign)
- [lint/rules/no-global-assign.md](https://docs.deno.com/lint/rules/no-global-assign)
- [lint/rules/no-implicit-declare-namespace-export.md](https://docs.deno.com/lint/rules/no-implicit-declare-namespace-export)
- [lint/rules/no-import-assertions.md](https://docs.deno.com/lint/rules/no-import-assertions)
- [lint/rules/no-import-assign.md](https://docs.deno.com/lint/rules/no-import-assign)
- [lint/rules/no-inferrable-types.md](https://docs.deno.com/lint/rules/no-inferrable-types)
- [lint/rules/no-inner-declarations.md](https://docs.deno.com/lint/rules/no-inner-declarations)
- [lint/rules/no-invalid-regexp.md](https://docs.deno.com/lint/rules/no-invalid-regexp)
- [lint/rules/no-invalid-triple-slash-reference.md](https://docs.deno.com/lint/rules/no-invalid-triple-slash-reference)
- [lint/rules/no-irregular-whitespace.md](https://docs.deno.com/lint/rules/no-irregular-whitespace)
- [lint/rules/no-misused-new.md](https://docs.deno.com/lint/rules/no-misused-new)
- [lint/rules/no-namespace.md](https://docs.deno.com/lint/rules/no-namespace)
- [lint/rules/no-new-symbol.md](https://docs.deno.com/lint/rules/no-new-symbol)
- [lint/rules/no-node-globals.md](https://docs.deno.com/lint/rules/no-node-globals)
- [lint/rules/no-non-null-asserted-optional-chain.md](https://docs.deno.com/lint/rules/no-non-null-asserted-optional-chain)
- [lint/rules/no-non-null-assertion.md](https://docs.deno.com/lint/rules/no-non-null-assertion)
- [lint/rules/no-obj-calls.md](https://docs.deno.com/lint/rules/no-obj-calls)
- [lint/rules/no-octal.md](https://docs.deno.com/lint/rules/no-octal)
- [lint/rules/no-process-global.md](https://docs.deno.com/lint/rules/no-process-global)
- [lint/rules/no-prototype-builtins.md](https://docs.deno.com/lint/rules/no-prototype-builtins)
- [lint/rules/no-redeclare.md](https://docs.deno.com/lint/rules/no-redeclare)
- [lint/rules/no-regex-spaces.md](https://docs.deno.com/lint/rules/no-regex-spaces)
- [lint/rules/no-self-assign.md](https://docs.deno.com/lint/rules/no-self-assign)
- [lint/rules/no-self-compare.md](https://docs.deno.com/lint/rules/no-self-compare)
- [lint/rules/no-setter-return.md](https://docs.deno.com/lint/rules/no-setter-return)
- [lint/rules/no-shadow-restricted-names.md](https://docs.deno.com/lint/rules/no-shadow-restricted-names)
- [lint/rules/no-sloppy-imports.md](https://docs.deno.com/lint/rules/no-sloppy-imports)
- [lint/rules/no-slow-types.md](https://docs.deno.com/lint/rules/no-slow-types)
- [lint/rules/no-sparse-arrays.md](https://docs.deno.com/lint/rules/no-sparse-arrays)
- [lint/rules/no-sync-fn-in-async-fn.md](https://docs.deno.com/lint/rules/no-sync-fn-in-async-fn)
- [lint/rules/no-this-alias.md](https://docs.deno.com/lint/rules/no-this-alias)
- [lint/rules/no-this-before-super.md](https://docs.deno.com/lint/rules/no-this-before-super)
- [lint/rules/no-throw-literal.md](https://docs.deno.com/lint/rules/no-throw-literal)
- [lint/rules/no-top-level-await.md](https://docs.deno.com/lint/rules/no-top-level-await)
- [lint/rules/no-undef.md](https://docs.deno.com/lint/rules/no-undef)
- [lint/rules/no-unreachable.md](https://docs.deno.com/lint/rules/no-unreachable)
- [lint/rules/no-unsafe-finally.md](https://docs.deno.com/lint/rules/no-unsafe-finally)
- [lint/rules/no-unsafe-negation.md](https://docs.deno.com/lint/rules/no-unsafe-negation)
- [lint/rules/no-unused-labels.md](https://docs.deno.com/lint/rules/no-unused-labels)
- [lint/rules/no-unused-vars.md](https://docs.deno.com/lint/rules/no-unused-vars)
- [lint/rules/no-useless-rename.md](https://docs.deno.com/lint/rules/no-useless-rename)
- [lint/rules/no-var.md](https://docs.deno.com/lint/rules/no-var)
- [lint/rules/no-window-prefix.md](https://docs.deno.com/lint/rules/no-window-prefix)
- [lint/rules/no-window.md](https://docs.deno.com/lint/rules/no-window)
- [lint/rules/no-with.md](https://docs.deno.com/lint/rules/no-with)
- [lint/rules/prefer-as-const.md](https://docs.deno.com/lint/rules/prefer-as-const)
- [lint/rules/prefer-ascii.md](https://docs.deno.com/lint/rules/prefer-ascii)
- [lint/rules/prefer-const.md](https://docs.deno.com/lint/rules/prefer-const)
- [lint/rules/prefer-namespace-keyword.md](https://docs.deno.com/lint/rules/prefer-namespace-keyword)
- [lint/rules/prefer-primordials.md](https://docs.deno.com/lint/rules/prefer-primordials)
- [lint/rules/react-no-danger-with-children.md](https://docs.deno.com/lint/rules/react-no-danger-with-children)
- [lint/rules/react-no-danger.md](https://docs.deno.com/lint/rules/react-no-danger)
- [lint/rules/react-rules-of-hooks.md](https://docs.deno.com/lint/rules/react-rules-of-hooks)
- [lint/rules/require-await.md](https://docs.deno.com/lint/rules/require-await)
- [lint/rules/require-yield.md](https://docs.deno.com/lint/rules/require-yield)
- [lint/rules/single-var-declarator.md](https://docs.deno.com/lint/rules/single-var-declarator)
- [lint/rules/triple-slash-reference.md](https://docs.deno.com/lint/rules/triple-slash-reference)
- [lint/rules/use-isnan.md](https://docs.deno.com/lint/rules/use-isnan)
- [lint/rules/valid-typeof.md](https://docs.deno.com/lint/rules/valid-typeof)
- [lint/rules/verbatim-module-syntax.md](https://docs.deno.com/lint/rules/verbatim-module-syntax)

## Optional

- [Contribution Guidelines](/runtime/contributing): How to contribute to Deno
- [Style Guide](/runtime/contributing/style_guide): Coding style guidelines for Deno
- [Release Schedule](/runtime/contributing/release_schedule): Deno's release cadence and versioning
